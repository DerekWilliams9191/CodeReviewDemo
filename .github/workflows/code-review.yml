# Create artifacts directory
mkdir -p artifacts

# Get all C# files that were modified in this PR
FILES=$(git diff --name-only 1c493b767d2faed605a81386a0693838429f615e 66fcff45a96c7d44792e744d7b136c8d0fce102c | grep '\.cs')

# Initialize tracking variables
ISSUES_FOUND=false
MISSING_NULL_CHECKS=false
MISSING_VALIDATION=false
MISSING_DOCUMENTATION=false
MISSING_EXCEPTION_HANDLING=false
MISSING_LOGGING=false

# Loop through each modified C# file
for FILE in $FILES; do
  echo "Analyzing $FILE..."
  
  # Check for null checks (looking for commented out null check patterns)
  if grep -q "//\s*if\s*(.*\s*==\s*null)" "$FILE"; then
    MISSING_NULL_CHECKS=true
    ISSUES_FOUND=true
  fi
  
  # Check for input validation (looking for commented validation code)
  if grep -q "//\s*if\s*(!.*\.IsValid" "$FILE" || grep -q "//\s*validator\.Validate" "$FILE"; then
    MISSING_VALIDATION=true
    ISSUES_FOUND=true
  fi
  
  # Check for XML documentation
  if grep -q "//\s*/// <summary>" "$FILE"; then
    MISSING_DOCUMENTATION=true
    ISSUES_FOUND=true
  fi
  
  # Check for exception handling
  if grep -q "//\s*try" "$FILE" || grep -q "//\s*catch" "$FILE"; then
    MISSING_EXCEPTION_HANDLING=true
    ISSUES_FOUND=true
  fi
  
  # Check for logging
  if grep -q "//\s*_logger\.Log" "$FILE" || grep -q "//\s*Console\.Write" "$FILE"; then
    MISSING_LOGGING=true
    ISSUES_FOUND=true
  fi
done

# Save the issues found status to a file
echo "ISSUES_FOUND=$ISSUES_FOUND" > artifacts/analysis_results.txt
echo "MISSING_NULL_CHECKS=$MISSING_NULL_CHECKS" >> artifacts/analysis_results.txt
echo "MISSING_VALIDATION=$MISSING_VALIDATION" >> artifacts/analysis_results.txt
echo "MISSING_DOCUMENTATION=$MISSING_DOCUMENTATION" >> artifacts/analysis_results.txt
echo "MISSING_EXCEPTION_HANDLING=$MISSING_EXCEPTION_HANDLING" >> artifacts/analysis_results.txt
echo "MISSING_LOGGING=$MISSING_LOGGING" >> artifacts/analysis_results.txt

# Create the PR comment content for issue cases
if [ "$ISSUES_FOUND" == "true" ]; then
  cat > artifacts/review_message.md << 'EOL'
## Code Review Results

🔍 **Code Quality Issues Found:**

EOL
  
  if [ "$MISSING_NULL_CHECKS" == "true" ]; then
    echo "- ❌ **Missing Null Checks**: The code is missing important null checks. Look for commented lines with null checks and uncomment them." >> artifacts/review_message.md
  fi
  
  if [ "$MISSING_VALIDATION" == "true" ]; then
    echo "- ❌ **Missing Input Validation**: The code doesn't validate inputs before processing them. Find and uncomment the validation code." >> artifacts/review_message.md
  fi
  
  if [ "$MISSING_DOCUMENTATION" == "true" ]; then
    echo "- ❌ **Missing Documentation**: The code lacks proper XML documentation. Uncomment the documentation sections." >> artifacts/review_message.md
  fi
  
  if [ "$MISSING_EXCEPTION_HANDLING" == "true" ]; then
    echo "- ❌ **Missing Exception Handling**: The code doesn't properly handle exceptions. Uncomment the try/catch blocks." >> artifacts/review_message.md
  fi
  
  if [ "$MISSING_LOGGING" == "true" ]; then
    echo "- ❌ **Missing Logging**: The code doesn't include proper logging. Uncomment the logging statements." >> artifacts/review_message.md
  fi
  
  echo -e "\nPlease address these code quality issues by uncommenting the correct code sections and update your PR." >> artifacts/review_message.md
  
  # Create the PR review body (shorter version that goes with the PR review)
  echo "Code quality issues found. Please address them by uncommenting the necessary code." > artifacts/review_body.txt
  
  # Indicate this should be a "REQUEST_CHANGES" review
  echo "REQUEST_CHANGES" > artifacts/review_type.txt
else
  # Create the PR comment for success cases
  cat > artifacts/review_message.md << 'EOL'
## Code Review Results

🎉 **Great job!** All tests are passing and code quality standards have been met.
EOL
  
  # Create the PR review body for success
  echo "All code quality standards have been met. Great job!" > artifacts/review_body.txt
  
  # Indicate this should be an "APPROVE" review
  echo "APPROVE" > artifacts/review_type.txt
fi
