name: Code Review Training

on:
  pull_request:
    types: [opened, synchronize]
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    outputs:
      test_passed: ${{ steps.test.outputs.test_passed }}
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'
          
      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore
        
      - name: Test
        id: test
        run: |
          TEST_EXIT_CODE=0
          dotnet test --no-build --verbosity normal || TEST_EXIT_CODE=$?
          
          echo "test_passed=$([ $TEST_EXIT_CODE -eq 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
      
      - name: Comment on failing tests
        if: steps.test.outputs.test_passed == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `# ‚ùå Unit Tests Failed\n\nThe unit tests for this PR are failing. Before we can review the code quality, you need to make the tests pass.\n\nPlease uncomment the necessary code to fix the functionality issues, then we'll review the code for best practices.\n\nCommon issues that might cause test failures:\n- Missing null checks\n- Missing input validation\n- Exception handling is incomplete`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
            
            github.rest.pulls.createReview({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Tests are failing. Please fix the functionality issues first.",
              event: "REQUEST_CHANGES"
            });

  code-review:
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.outputs.test_passed == 'true'
    # Keep minimal permissions
    permissions:
      contents: read
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'
          
      - name: Analyze Code and Leave Reviews
        id: analyze
        run: |
          # Get all C# files that were modified in this PR
          FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '\.cs$')

          
          # Initialize tracking variables
          ISSUES_FOUND=false
          MISSING_NULL_CHECKS=false
          MISSING_VALIDATION=false
          MISSING_DOCUMENTATION=false
          MISSING_EXCEPTION_HANDLING=false
          MISSING_LOGGING=false
          
          # Loop through each modified C# file
          for FILE in $FILES; do
            echo "Analyzing $FILE..."
            
            # Check for null checks (looking for commented out null check patterns)
            if grep -q "//\s*if\s*(.*\s*==\s*null)" "$FILE"; then
              MISSING_NULL_CHECKS=true
              ISSUES_FOUND=true
            fi
            
            # Check for input validation (looking for commented validation code)
            if grep -q "//\s*if\s*(!.*\.IsValid" "$FILE" || grep -q "//\s*validator\.Validate" "$FILE"; then
              MISSING_VALIDATION=true
              ISSUES_FOUND=true
            fi
            
            # Check for XML documentation
            if grep -q "//\s*/// <summary>" "$FILE"; then
              MISSING_DOCUMENTATION=true
              ISSUES_FOUND=true
            fi
            
            # Check for exception handling
            if grep -q "//\s*try" "$FILE" || grep -q "//\s*catch" "$FILE"; then
              MISSING_EXCEPTION_HANDLING=true
              ISSUES_FOUND=true
            fi
            
            # Check for logging
            if grep -q "//\s*_logger\.Log" "$FILE" || grep -q "//\s*Console\.Write" "$FILE"; then
              MISSING_LOGGING=true
              ISSUES_FOUND=true
            fi
          done
          
          # Set output variables for the next step
          echo "issues_found=$ISSUES_FOUND" >> $GITHUB_OUTPUT
          echo "missing_null_checks=$MISSING_NULL_CHECKS" >> $GITHUB_OUTPUT
          echo "missing_validation=$MISSING_VALIDATION" >> $GITHUB_OUTPUT
          echo "missing_documentation=$MISSING_DOCUMENTATION" >> $GITHUB_OUTPUT
          echo "missing_exception_handling=$MISSING_EXCEPTION_HANDLING" >> $GITHUB_OUTPUT
          echo "missing_logging=$MISSING_LOGGING" >> $GITHUB_OUTPUT

      # Create output file with results (instead of using GitHub API)
      - name: Generate results file
        id: generate_results
        run: |
          # Build feedback text
          echo "## Code Review Results" > code_review_results.md
          
          if [ "${{ steps.analyze.outputs.issues_found }}" == "true" ]; then
            echo "" >> code_review_results.md
            echo "üîç **Code Quality Issues Found:**" >> code_review_results.md
            echo "" >> code_review_results.md
            
            if [ "${{ steps.analyze.outputs.missing_null_checks }}" == "true" ]; then
              echo "- ‚ùå **Missing Null Checks**: The code is missing important null checks. Look for commented lines with null checks and uncomment them." >> code_review_results.md
            fi
            
            if [ "${{ steps.analyze.outputs.missing_validation }}" == "true" ]; then
              echo "- ‚ùå **Missing Input Validation**: The code doesn't validate inputs before processing them. Find and uncomment the validation code." >> code_review_results.md
            fi
            
            if [ "${{ steps.analyze.outputs.missing_documentation }}" == "true" ]; then
              echo "- ‚ùå **Missing Documentation**: The code lacks proper XML documentation. Uncomment the documentation sections." >> code_review_results.md
            fi
            
            if [ "${{ steps.analyze.outputs.missing_exception_handling }}" == "true" ]; then
              echo "- ‚ùå **Missing Exception Handling**: The code doesn't properly handle exceptions. Uncomment the try/catch blocks." >> code_review_results.md
            fi
            
            if [ "${{ steps.analyze.outputs.missing_logging }}" == "true" ]; then
              echo "- ‚ùå **Missing Logging**: The code doesn't include proper logging. Uncomment the logging statements." >> code_review_results.md
            fi
            
            echo "" >> code_review_results.md
            echo "---" >> code_review_results.md
            echo "" >> code_review_results.md
            echo "Please address these code quality issues by uncommenting the correct code sections and update your PR." >> code_review_results.md
            
            # Set job output to failure for GitHub Actions summary
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "" >> code_review_results.md
            echo "üéâ **Great job!** All tests are passing and code quality standards have been met." >> code_review_results.md
            
            # Set job output to success for GitHub Actions summary
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      # Upload results file as an artifact (avoids API calls)
      - name: Upload code review results
        uses: actions/upload-artifact@v3
        with:
          name: code-review-results
          path: code_review_results.md
          
      # Use GitHub Actions workflow commands for job status
      - name: Set job status
        run: |
          if [ "${{ steps.generate_results.outputs.status }}" == "failure" ]; then
            echo "Code quality issues found. See uploaded artifacts for details."
            exit 1
          else
            echo "All code quality checks passed!"
          fi
